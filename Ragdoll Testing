local repo = "https://raw.githubusercontent.com/mstudio45/LinoriaLib/main/"

local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()
local Options = Library.Options
local Toggles = Library.Toggles

Library.ShowToggleFrameInKeybinds = true
Library.ShowCustomCursor = true
Library.NotifySide = "Left"

local Window = Library:CreateWindow({
	Title = "Zephyr - Ragdoll Testing",
	Center = true,
	AutoShow = true,
	Resizable = true,
	ShowCustomCursor = true,
	NotifySide = "Left",
	TabPadding = 8,
	MenuFadeTime = 0.2,
})

local Tabs = {
	Main = Window:AddTab("Main"),
	Exploits = Window:AddTab("Exploits"),
	Sniper = Window:AddTab("Sniper"),
	["UI Settings"] = Window:AddTab("UI Settings"),
}

local Main = Tabs.Main:AddLeftGroupbox("Main")

getgenv().KillAuraReach = 50

Main:AddToggle("KillAura", {
    Text = "Kill Aura",
    Default = false,
    Callback = function(Value)
        getgenv().KillAura = Value
        while getgenv().KillAura and task.wait() do
            local lp = game.Players.LocalPlayer
            local char = lp.Character
            if not (lp and char and char:FindFirstChild("HumanoidRootPart")) then continue end
            local nearest, dist = nil, math.huge
            for _, v in pairs(game.Players:GetPlayers()) do
                if v ~= lp and v.Character and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health > 0 then
                    local mag = (char.HumanoidRootPart.Position - v.Character.HumanoidRootPart.Position).Magnitude
                    if mag < dist and mag <= getgenv().KillAuraReach then
                        nearest, dist = v, mag
                    end
                end
            end
            if nearest then
                for _, toolName in {"Punch", "Yeet"} do
                    local tool = char:FindFirstChild(toolName)
                    if tool and tool:FindFirstChild("push") then
                        tool.push:FireServer(nearest, 1)
                    end
                end
            end
        end
    end
}):AddKeyPicker('KillAuraKeybind', {
    Default = 'M',
    SyncToggleState = true,
    Mode = Library.IsMobile and 'Toggle' or 'Hold',
    Text = 'KillAura',
    NoUI = false,
    Callback = function(Value) end,
    ChangedCallback = function(New) end
})

Main:AddSlider("KillAuraReach", {
    Text = "Reach",
    Default = 50,
    Min = 1,
    Max = 50,
    Rounding = 0,
    Callback = function(Value)
        getgenv().KillAuraReach = Value
    end
})

local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local v3zero = Vector3.new(0, 0, 0)
local v3inf = Vector3.new(9e9, 9e9, 9e9)

local speaker = game.Players.LocalPlayer
local camera = workspace.CurrentCamera
local controlModule = require(speaker.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule"))

local velocityHandlerName = "VelocityHandler"
local gyroHandlerName = "GyroHandler"

local flying = false
local renderSteppedConnection
local FlightSpeed = 16

local function setupFlyingParts(character)
    local rootPart = character:FindFirstChild("HumanoidRootPart") or character:WaitForChild("HumanoidRootPart")
    for _, child in pairs(rootPart:GetChildren()) do
        if child.Name == velocityHandlerName or child.Name == gyroHandlerName then
            child:Destroy()
        end
    end

    local bv = Instance.new("BodyVelocity")
    bv.Name = velocityHandlerName
    bv.Parent = rootPart
    bv.MaxForce = v3zero
    bv.Velocity = v3zero

    local bg = Instance.new("BodyGyro")
    bg.Name = gyroHandlerName
    bg.Parent = rootPart
    bg.MaxTorque = v3inf
    bg.P = 1000
    bg.D = 50
end

local function disableFlying(character)
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end
    for _, child in pairs(rootPart:GetChildren()) do
        if child.Name == velocityHandlerName or child.Name == gyroHandlerName then
            child:Destroy()
        end
    end
    local humanoid = character:FindFirstChildWhichIsA("Humanoid")
    if humanoid then
        humanoid.PlatformStand = false
    end
end

local function onRenderStep()
    local character = speaker.Character
    if not character then return end

    local rootPart = character:FindFirstChild("HumanoidRootPart")
    local humanoid = character:FindFirstChildWhichIsA("Humanoid")
    if not rootPart or not humanoid then return end

    local velocityHandler = rootPart:FindFirstChild(velocityHandlerName)
    local gyroHandler = rootPart:FindFirstChild(gyroHandlerName)
    if not velocityHandler or not gyroHandler then return end

    velocityHandler.MaxForce = v3inf
    gyroHandler.MaxTorque = v3inf

    humanoid.PlatformStand = true

    gyroHandler.CFrame = camera.CFrame
    velocityHandler.Velocity = v3zero

    local moveVector = controlModule:GetMoveVector()

    if moveVector.X ~= 0 then
        local rightVector = camera.CFrame.RightVector
        velocityHandler.Velocity = velocityHandler.Velocity + rightVector * (moveVector.X * FlightSpeed)
    end

    if moveVector.Z ~= 0 then
        local lookVector = camera.CFrame.LookVector
        velocityHandler.Velocity = velocityHandler.Velocity - lookVector * (moveVector.Z * FlightSpeed)
    end
end

Main:AddToggle("FlightToggle", {
    Text = "Flight",
    Default = false,
    Callback = function(state)
        flying = state
        local character = speaker.Character or speaker.CharacterAdded:Wait()
        if flying then
            setupFlyingParts(character)
            renderSteppedConnection = RunService.RenderStepped:Connect(onRenderStep)
        else
            if renderSteppedConnection then
                renderSteppedConnection:Disconnect()
                renderSteppedConnection = nil
            end
            disableFlying(character)
        end
    end
}):AddKeyPicker('FlightKeybind', {
    Default = 'N',
    SyncToggleState = true,
    Mode = Library.IsMobile and 'Toggle' or 'Hold',
    Text = 'Flight',
    NoUI = false,
    Callback = function(Value) end,
    ChangedCallback = function(New) end
})

Main:AddSlider("FlightSpeed", {
    Text = "Flight Speed",
    Default = 16,
    Min = 16,
    Max = 1000,
    Rounding = 0,
    Callback = function(Value)
        FlightSpeed = Value
    end
})

local UserInputService = game:GetService("UserInputService")
local Player = game.Players.LocalPlayer
local flyjump = nil

Main:AddToggle("InfiniteJump", {
    Text = "Infinite Jump",
    Default = false,
    Callback = function(Value)
if Value then
if flyjump then
    flyjump:Disconnect()
end

flyjump = UserInputService.JumpRequest:Connect(function()
    local character = Player.Character
    if character then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end)
else
if flyjump then
   flyjump:Disconnect()
   flyjump = nil
end
end
    end
})

local connection

Main:AddToggle("InstantInteract", {
    Text = "Instant Interact",
    Default = false,
    Callback = function(Value)
    if Value then
        connection = game:GetService("ProximityPromptService").PromptButtonHoldBegan:Connect(function(prompt)
            fireproximityprompt(prompt)
        end)
    else
        if connection then
            connection:Disconnect()
            connection = nil
        end
    end
    end
})

local Movement = Tabs.Main:AddLeftGroupbox("Movement")

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local SpeedConnection
local JumpConnection
local FOVConnection

Movement:AddToggle("SpeedToggle", {
    Text = "Enable Speed",
    Default = false,
    Callback = function(Value)
        if Value then
            SpeedConnection = RunService.Heartbeat:Connect(function()
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                    LocalPlayer.Character.Humanoid.WalkSpeed = _G.SpeedValue or 16
                end
            end)
        else
            if SpeedConnection then SpeedConnection:Disconnect() end
            SpeedConnection = nil
            LocalPlayer.Character.Humanoid.WalkSpeed = 16
        end
    end
})

Movement:AddToggle("JumpToggle", {
    Text = "Enable Jump Power",
    Default = false,
    Callback = function(Value)
        if Value then
            JumpConnection = RunService.Heartbeat:Connect(function()
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                    LocalPlayer.Character.Humanoid.JumpPower = _G.JumpValue or 50
                end
            end)
        else
            if JumpConnection then JumpConnection:Disconnect() end
            JumpConnection = nil
            LocalPlayer.Character.Humanoid.JumpPower = 25
        end
    end
})

Movement:AddToggle("FOVToggle", {
    Text = "Enable Field Of View",
    Default = false,
    Callback = function(Value)
        if Value then
            FOVConnection = RunService.Heartbeat:Connect(function()
                game.Workspace.CurrentCamera.FieldOfView = _G.FOVValue or 70
            end)
        else
            if FOVConnection then FOVConnection:Disconnect() end
            FOVConnection = nil
            game.Workspace.CurrentCamera.FieldOfView = 70
        end
    end
})

Movement:AddSlider("SpeedSlider", {
    Text = "Speed",
    Default = 16,
    Min = 16,
    Max = 500,
    Rounding = 0,
    Callback = function(Value)
        _G.SpeedValue = Value
    end
})

Movement:AddSlider("JumpSlider", {
    Text = "Jump Power",
    Default = 25,
    Min = 25,
    Max = 100,
    Rounding = 0,
    Callback = function(Value)
        _G.JumpValue = Value
    end
})

Movement:AddSlider("FOVSlider", {
    Text = "FOV",
    Default = 70,
    Min = 70,
    Max = 120,
    Rounding = 0,
    Callback = function(Value)
        _G.FOVValue = Value
    end
})

local Tools = Tabs.Main:AddRightGroupbox("Tools")

Tools:AddButton({
    Text = "Equip All Tools",
    Func = function()
local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()

for _, tool in ipairs(player.Backpack:GetChildren()) do
    if tool:IsA("Tool") then
        tool.Parent = char
    end
end
    end
})

Tools:AddButton({
    Text = "UnEquip All Tools",
    Func = function()
local player = game.Players.LocalPlayer
local backpack = player:WaitForChild("Backpack")
local char = player.Character or player.CharacterAdded:Wait()

for _, tool in ipairs(char:GetChildren()) do
    if tool:IsA("Tool") then
        tool.Parent = backpack
    end
end
    end
})

Tools:AddButton({
    Text = "Drop All Tools",
    Func = function()
local player = game.Players.LocalPlayer

for _, tool in ipairs(player.Backpack:GetChildren()) do
    if tool:IsA("Tool") then
        tool.Parent = player.Character
    end
end
wait(1)
for _, tool in ipairs(player.Character:GetChildren()) do
    if tool:IsA("Tool") then
        tool.Parent = workspace
    end
end
    end
})

local Exploits = Tabs.Exploits:AddLeftGroupbox("Exploits")

Exploits:AddToggle("SpamYeetSound", {
    Text = "Spam Yeet Sound",
    Default = false,
    Callback = function(enabled)
        getgenv().SpamYeetSound = enabled

        if not getgenv().SpamYeetSound then return end

        task.spawn(function()
            while getgenv().SpamYeetSound do
                local player = game.Players.LocalPlayer
                local character = player.Character
                local backpack = player.Backpack

                if character then
                    local selfYeet = character:FindFirstChild("SelfYeet") or backpack:FindFirstChild("SelfYeet")

                    if selfYeet then
                        if selfYeet.Parent == backpack then
                            selfYeet.Parent = character
                        end

                        local push = selfYeet:FindFirstChild("push")
                        if push then
                            push:FireServer()
                        end
                    end
                end
                task.wait()
            end
        end)
    end
}):AddKeyPicker('SpamYeetSound', {
    Default = 'B',
    SyncToggleState = true,
    Mode = Library.IsMobile and 'Toggle' or 'Hold',
    Text = 'Spam Yeet Sound',
    NoUI = false,
    Callback = function(Value) end,
    ChangedCallback = function(New) end
})

Exploits:AddToggle("LagServer", {
    Text = "Lag Server",
    Default = false,
    Callback = function(Value)
        getgenv().lagserver = Value

        if Value then
            while getgenv().lagserver do
                pcall(function()
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(260, 8, 115)
                end)
                task.wait(0.1)
                pcall(function()
                    fireproximityprompt(workspace.RagdollTesting.things.house.firstfloor.vendingmachine.panel.bg:FindFirstChildWhichIsA("ProximityPrompt"))
                end)
                task.wait(0.1)
                pcall(function()
                    firesignal(game.Players.LocalPlayer.PlayerGui.VMGui.mframe.items.container.snacks.container.Cheezburger.MouseButton1Click)
                end)
                task.wait()
            end
        else
            pcall(function()
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(260, 7, 120)
            end)
        end
    end
})

local Anti = Tabs.Exploits:AddRightGroupbox("Anti")

Anti:AddToggle("AntiRagdoll", {
    Text = "Anti Ragdoll",
    Default = false,
    Callback = function(Value)
        getgenv().AntiRagdoll = Value
        while getgenv().AntiRagdoll do
            local args = {
                "R",
                false
            }
            game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("RTGui"):WaitForChild("codebase"):WaitForChild("ragdoll"):WaitForChild("Events"):WaitForChild("Toggle"):FireServer(unpack(args))
             task.wait()
        end
    end
})

Anti:AddToggle("AntiTitanGrab", {
    Text = "Anti Titan Grab",
    Default = false,
    Callback = function(Value)
        getgenv().AntiTitanGrab = Value
        while getgenv().AntiTitanGrab do
            game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("RTGui"):WaitForChild("codebase"):WaitForChild("avatar"):WaitForChild("dropplrev"):FireServer()
            task.wait()
        end
    end
})

local Sniper = Tabs.Sniper:AddLeftGroupbox("Sniper")

local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local TargetName = nil
local FlingLoop = false

Sniper:AddDropdown("PlayerDropdownSniper", {
	SpecialType = "Player",
	ExcludeLocalPlayer = true,
	Text = "Select Player",
	Callback = function(Value)
		TargetName = Value
	end
})

Sniper:AddToggle("ViewPlayer", {
	Text = "View Player",
	Default = false,
	Callback = function(Value)
		if Value and TargetName then
			local Target = Players:FindFirstChild(TargetName)
			if Target and Target.Character then
				local Humanoid = Target.Character:FindFirstChildOfClass("Humanoid")
				if Humanoid then
					Camera.CameraSubject = Humanoid
				end
			end
		else
			Camera.CameraSubject = Player.Character:FindFirstChildOfClass("Humanoid")
		end
	end
})

Sniper:AddToggle("TeleportToPlayer", {
	Text = "Teleport To Player",
	Default = false,
	Callback = function(Value)
		getgenv().Teleport = Value
		if Value then
			task.spawn(function()
				while getgenv().Teleport and TargetName do
					local Char = Player.Character
					local Root = Char and Char:FindFirstChild("HumanoidRootPart")
					local Target = Players:FindFirstChild(TargetName)
					local TChar = Target and Target.Character
					local TRoot = TChar and TChar:FindFirstChild("HumanoidRootPart")
					if Root and TRoot then
						Root.CFrame = TRoot.CFrame
					end
					task.wait()
				end
			end)
		end
	end
})

Sniper:AddToggle("FlingPlayer", {
	Text = "Fling Player",
	Default = false,
	Callback = function(Value)
		FlingLoop = Value
		if FlingLoop then
			task.spawn(function()
				while FlingLoop and TargetName do
					local Target = Players:FindFirstChild(TargetName)
					local TChar = Target and Target.Character
					if TChar then
						SkidFling(TChar)
					end
					task.wait(0.5)
				end
			end)
		end
	end
})

function SkidFling(TargetCharacter)
	local Character = Player.Character
	local Humanoid = Character and Character:FindFirstChildOfClass("Humanoid")
	local RootPart = Humanoid and Character:FindFirstChild("HumanoidRootPart")

	local THumanoid = TargetCharacter:FindFirstChildOfClass("Humanoid")
	local TRootPart = THumanoid and TargetCharacter:FindFirstChild("HumanoidRootPart")
	local THead = TargetCharacter:FindFirstChild("Head")
	local Accessory = TargetCharacter:FindFirstChildOfClass("Accessory")
	local Handle = Accessory and Accessory:FindFirstChild("Handle")

	if Character and Humanoid and RootPart then
		if RootPart.Velocity.Magnitude < 50 then
			getgenv().OldPos = RootPart.CFrame
		end

		local Base = TargetCharacter:FindFirstChildWhichIsA("BasePart")
		if not Base then return end

		local FPos = function(BasePart, Pos, Ang)
			RootPart.CFrame = CFrame.new(BasePart.Position) * Pos * Ang
			Character:SetPrimaryPartCFrame(CFrame.new(BasePart.Position) * Pos * Ang)
			RootPart.Velocity = Vector3.new(9e7, 9e7 * 10, 9e7)
			RootPart.RotVelocity = Vector3.new(9e8, 9e8, 9e8)
		end

		local SFBasePart = function(BasePart)
			local Time = tick()
			local Angle = 0
			repeat
				if not FlingLoop or not RootPart or not THumanoid then break end
				Angle += 100
				FPos(BasePart, CFrame.new(0, 1.5, 0), CFrame.Angles(math.rad(Angle), 0, 0))
				task.wait()
				FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(math.rad(Angle), 0, 0))
				task.wait()
			until BasePart.Velocity.Magnitude > 500 or Humanoid.Health <= 0 or tick() > Time + 2
		end

		workspace.FallenPartsDestroyHeight = 0/0

		local BV = Instance.new("BodyVelocity")
		BV.Name = "EpixVel"
		BV.Parent = RootPart
		BV.Velocity = Vector3.new(9e8, 9e8, 9e8)
		BV.MaxForce = Vector3.new(1/0, 1/0, 1/0)

		Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)

		if TRootPart and THead then
			if (TRootPart.Position - THead.Position).Magnitude > 5 then
				SFBasePart(THead)
			else
				SFBasePart(TRootPart)
			end
		elseif TRootPart then
			SFBasePart(TRootPart)
		elseif THead then
			SFBasePart(THead)
		elseif Handle then
			SFBasePart(Handle)
		end

		BV:Destroy()
		Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)

		repeat
			RootPart.CFrame = getgenv().OldPos * CFrame.new(0, .5, 0)
			Character:SetPrimaryPartCFrame(getgenv().OldPos * CFrame.new(0, .5, 0))
			Humanoid:ChangeState("GettingUp")
			for _, part in ipairs(Character:GetChildren()) do
				if part:IsA("BasePart") then
					part.Velocity = Vector3.zero
					part.RotVelocity = Vector3.zero
				end
			end
			task.wait()
		until (RootPart.Position - getgenv().OldPos.Position).Magnitude < 25
	end
end

Library:OnUnload(function()
	print("Unloaded!")
	Library.Unloaded = true
end)

local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menu")

MenuGroup:AddToggle("KeybindMenuOpen", {
	Default = Library.KeybindFrame.Visible,
	Text = "Open Keybind Menu",
	Callback = function(value)
		Library.KeybindFrame.Visible = value
	end,
})
MenuGroup:AddToggle("ShowCustomCursor", {
	Text = "Custom Cursor",
	Default = true,
	Callback = function(Value)
		Library.ShowCustomCursor = Value
	end,
})
MenuGroup:AddDropdown('Notification Side', {
	Values = {'Left', 'Right'},
	Default = 1,
	Multi = false,
	Text = 'Notification Side',
	Callback = function(Value)
		Library.NotifySide = Value
	end
})
MenuGroup:AddDivider()
MenuGroup:AddLabel("Menu bind")
	:AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "Menu keybind" })
MenuGroup:AddButton("Unload", function()
	Library:Unload()
end)

Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })
ThemeManager:SetFolder("Zephyr")
SaveManager:SetFolder("Zephyr/RagdollTesting")
SaveManager:SetSubFolder("RagdollTesting")
SaveManager:BuildConfigSection(Tabs["UI Settings"])
ThemeManager:ApplyToTab(Tabs["UI Settings"])
SaveManager:LoadAutoloadConfig()
